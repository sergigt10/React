{"version":3,"sources":["helpers/fetch.js","types/types.js","actions/translations.js","actions/auth.js","hooks/useForm.js","components/auth/LoginScreen.js","components/ui/Navbar.js","components/dictionary/DictionaryModal.js","actions/ui.js","components/ui/AddNewFab.js","components/ui/DeleteEventFab.js","components/ui/TranslationsGridItem.js","components/ui/Pagination.js","components/ui/TranslationsGrid.js","components/dictionary/DictionaryScreen.js","router/PublicRoute.js","router/PrivateRoute.js","components/dictionary/DictionarySearch.js","components/selectors/getTranslationsByName.js","router/AppRouter.js","reducers/uiReducer.js","reducers/dictionaryReducer.js","reducers/authReducer.js","reducers/rootReducer.js","store/store.js","DictionaryApp.js","index.js"],"names":["baseUrl","process","fetchSinToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchConToken","token","localStorage","getItem","types","translationAddNew","translation","type","payload","translationDeleted","translationStartLoading","dispatch","a","resp","json","translations","translationLoaded","console","log","checkingFinish","login","user","startLogout","clear","logout","useForm","initialState","useState","values","setValues","reset","handleInputChange","target","name","value","LoginScreen","useDispatch","lEmail","lPassword","formLoginValues","handleLoginInputChange","className","onSubmit","e","email","password","preventDefault","ok","setItem","Date","getTime","uid","swal","fire","msg","placeholder","onChange","Navbar","useSelector","state","auth","exact","to","onClick","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","initTranslation","wordEsp","wordIta","DictionaryModal","modalOpen","ui","wordEspValid","setWordEspValid","wordItaValid","setWordItaValid","formValues","setFormValues","closeModal","isOpen","onRequestClose","style","closeTimeoutMS","overlayClassName","trim","length","getState","id","_id","autoComplete","AddNewFab","DeleteEventFab","idTranslation","dictionary","activeTranslation","Swal","TranslationsGridItem","Pagination","translationsPerPage","totalTranslations","paginate","pageNumbers","i","Math","ceil","push","map","number","key","TranslationsGrid","currentPage","setCurrentPage","indexOfLastTranslation","indexOfFirstTranslation","currentTranslations","slice","scope","pageNumber","DictionaryScreen","useEffect","PublicRoute","isAuthenticated","Component","component","rest","props","PrivateRoute","DictionarySearch","history","location","useLocation","queryString","parse","search","q","searchText","translationFiltered","useMemo","toLocaleLowerCase","filter","includes","getTranslationsByName","AppRouter","checking","path","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","DictionaryApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c9c09cf.chunk.js","sourcesContent":["\r\nconst baseUrl = process.env.REACT_APP_API_URL;\r\n\r\nconst fetchSinToken = ( endpoint, data, method = 'GET' ) => {\r\n    const url = `${ baseUrl }/${ endpoint }`; // baseUrl -> localhost:4000/api/\r\n\r\n    if ( method === 'GET' ) {\r\n        return fetch( url );\r\n    }else { \r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify( data )\r\n        });\r\n    }\r\n\r\n}\r\n\r\nconst fetchConToken = ( endpoint, data, method = 'GET' ) => {\r\n    const url = `${ baseUrl }/${ endpoint }`; // baseUrl -> localhost:4000/api/\r\n    const token = localStorage.getItem('token') || '';\r\n\r\n    if ( method === 'GET' ) {\r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'x-token': token\r\n            }\r\n        } );\r\n    }else { \r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'x-token': token\r\n            },\r\n            body: JSON.stringify( data )\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    fetchSinToken,\r\n    fetchConToken\r\n}","export const types = {\r\n\r\n    uiOpenModal: '[ui] Open modal',\r\n    uiCloseModal: '[ui] Close modal',\r\n    \r\n    translationLogout: '[translation] Logout translation',\r\n\r\n    translationSetActive: '[translation] Set Active',\r\n\r\n    translationStartAddNew: '[translation] Start add new',\r\n    translationAddNew: '[translation] Add new',\r\n    translationClearActiveEvent: '[translation] Clear active event',\r\n    translationDeleted: '[translation] Event deleted',\r\n    translationLoaded: '[translation] Events loaded',\r\n\r\n    authCheckingFinish: '[auth] Finish checking login state',\r\n    authStartLogin: '[auth] Start login',\r\n    authLogin: '[auth] Login',\r\n    authStartRegister: '[auth] Start Register',\r\n    authStartTokenRenew: '[auth] Start token renew',\r\n    authLogout: '[auth] logout'\r\n\r\n}","import { types } from \"../types/types\";\r\nimport { fetchConToken } from \"../helpers/fetch\";\r\nimport Swal from 'sweetalert2';\r\n\r\nexport const translationStartAddNew = ( translation ) => {\r\n    return async ( dispatch, getState ) => {\r\n\r\n        // Accedemos al state del store con getState proporcionado por thunk\r\n        const { uid, name } = getState().auth;\r\n\r\n        try {\r\n            const resp = await fetchConToken('translations', translation, 'POST');\r\n            const body = await resp.json();\r\n\r\n            if ( body.ok ) {\r\n                translation.id = body.translation.id;\r\n                translation.user = {\r\n                    _id: uid,\r\n                    name: name\r\n                } \r\n                dispatch( translationAddNew( translation ) );\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n}\r\n\r\n// Si se guardo correctamente en la base de datos\r\nconst translationAddNew = (translation) => ({\r\n    type: types.translationAddNew,\r\n    payload: translation\r\n});\r\n\r\nexport const translationSetActive = (translation) => ({\r\n    type: types.translationSetActive,\r\n    payload: translation\r\n});\r\n\r\nexport const translationStartDeleted = () => {\r\n    return async( dispatch, getState ) => {\r\n\r\n        const idTranslation = getState().dictionary.activeTranslation;\r\n\r\n        try {\r\n            const resp = await fetchConToken(`translations/${ idTranslation }`, {}, 'DELETE');\r\n            const body = await resp.json();\r\n\r\n            if ( body.ok ) {\r\n                dispatch( translationDeleted() );\r\n            } else {\r\n                Swal.fire('Error', body.msg, 'error');\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nconst translationDeleted = () => ({\r\n    type: types.translationDeleted\r\n});\r\n\r\nexport const translationStartLoading = () => {\r\n    return async ( dispatch ) => {\r\n        \r\n        try {\r\n\r\n            const resp = await fetchConToken('translations');\r\n            const body = await resp.json(); \r\n\r\n            const translations = body.translations;\r\n\r\n            dispatch( translationLoaded(translations) );\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst translationLoaded = ( translations ) => ({\r\n    type: types.translationLoaded,\r\n    payload: translations\r\n});\r\n\r\nexport const translationLogout = () => ({\r\n    type: types.translationLogout\r\n})","import { fetchSinToken, fetchConToken } from \"../helpers/fetch\"\r\nimport { types } from \"../types/types\";\r\nimport swal from 'sweetalert2';\r\nimport { translationLogout } from \"./translations\";\r\n\r\n// Empezar el proceso de login\r\nexport const startLogin = (email, password) => {\r\n    // Tarea asincrona gracias a thunk de redux\r\n    return async( dispatch ) => {\r\n        const resp = await fetchSinToken( 'auth', { email, password }, 'POST' );\r\n        const body = await resp.json();\r\n\r\n        // Si todo sale bien\r\n        if ( body.ok ){\r\n            localStorage.setItem( 'token', body.token );\r\n            localStorage.setItem( 'token-init-date', new Date().getTime() );\r\n\r\n            // Establece el uid y el nombre de usuario\r\n            dispatch( login ({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }) );\r\n\r\n        } else {\r\n            swal.fire('Error', body.msg, 'error');\r\n        }\r\n    }\r\n}\r\n\r\n// Comprueba el token\r\nexport const startChecking = () => {\r\n    return async( dispatch ) => {\r\n        const resp = await fetchConToken( 'auth/renew' );\r\n        const body = await resp.json();\r\n\r\n        // Si todo sale bien\r\n        if ( body.ok ){\r\n            localStorage.setItem( 'token', body.token );\r\n            localStorage.setItem( 'token-init-date', new Date().getTime() );\r\n\r\n            // Establece el uid y el nombre de usuario\r\n            dispatch( login ({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }) );\r\n\r\n        } else {\r\n            dispatch( checkingFinish() );\r\n        }\r\n    }   \r\n}\r\n\r\n// Ponemos el checking en false\r\nconst checkingFinish = () => ({\r\n    type: types.authCheckingFinish\r\n})\r\n\r\n// Completa el login\r\nconst login = ( user ) => ({\r\n    type: types.authLogin,\r\n    payload: user\r\n})\r\n\r\n// Proceso sincrono\r\nexport const startLogout = () => {\r\n    return (dispatch) => {\r\n        localStorage.clear();\r\n        dispatch(translationLogout());\r\n        dispatch(logout());\r\n    }\r\n}\r\n\r\nconst logout = () => ({ type: types.authLogout })","\r\nimport { useState } from 'react';\r\n\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n    \r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues( initialState );\r\n    }\r\n\r\n\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value\r\n        });\r\n\r\n    }\r\n\r\n    return [ values, handleInputChange, reset ];\r\n\r\n}","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { startLogin } from '../../actions/auth';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport './login.css';\r\n\r\nexport const LoginScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [ formLoginValues, handleLoginInputChange ] = useForm ({\r\n        lEmail: '',\r\n        lPassword: ''\r\n    });\r\n\r\n    const { lEmail, lPassword } = formLoginValues;\r\n\r\n    const handleLogin = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        dispatch( startLogin( lEmail, lPassword ) );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container login-container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 mx-auto login-form-2\">\r\n                    <h3>DICTIONARY ONLINE</h3>\r\n                    <form onSubmit={ handleLogin }>\r\n                        <div className=\"form-group\">\r\n                            <input \r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Correo\"\r\n                                name=\"lEmail\"\r\n                                value={ lEmail }\r\n                                onChange={ handleLoginInputChange }\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Contraseña\"\r\n                                name=\"lPassword\"\r\n                                value={ lPassword }\r\n                                onChange={ handleLoginInputChange }\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input \r\n                                type=\"submit\"\r\n                                className=\"btn btn-dark\"\r\n                                value=\"Login\" \r\n                            />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { startLogout } from '../../actions/auth';\r\n\r\nexport const Navbar = () => {\r\n\r\n    // Extraemos info del store gracias a redux\r\n    const { name } = useSelector(state => state.auth);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleLogout = () => {\r\n        dispatch( startLogout() )\r\n    }\r\n\r\n    \r\n    return (\r\n        \r\n        <div className=\"navbar navbar-dark bg-dark mb-4\">\r\n\r\n            <span className=\"navbar-brand\">\r\n                { name }\r\n            </span>\r\n\r\n            <NavLink \r\n                className=\"nav-item nav-link\" \r\n                exact\r\n                to=\"/search\"\r\n            >\r\n                Search\r\n            </NavLink>\r\n\r\n            <button \r\n                className=\"btn btn-outline-danger\"\r\n                onClick={ handleLogout }\r\n            >\r\n                <i className=\"fas fa-sign-out-alt\"></i>\r\n                <span> Salir</span>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport Modal from 'react-modal';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { uiCloseModal } from '../../actions/ui';\r\nimport { translationStartAddNew } from '../../actions/translations';\r\n\r\nconst customStyles = {\r\n    content : {\r\n      top                   : '50%',\r\n      left                  : '50%',\r\n      right                 : 'auto',\r\n      bottom                : 'auto',\r\n      marginRight           : '-50%',\r\n      transform             : 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst initTranslation = {\r\n    wordEsp: '',\r\n    wordIta: ''\r\n}\r\n\r\nexport const DictionaryModal = () => {\r\n\r\n    const { modalOpen } = useSelector( state => state.ui );\r\n    const dispatch = useDispatch();\r\n\r\n    const [ wordEspValid, setWordEspValid ] = useState(true);\r\n    const [ wordItaValid, setWordItaValid ] = useState(true);\r\n\r\n    const [formValues, setFormValues] = useState( initTranslation );\r\n\r\n    const { wordEsp, wordIta } = formValues;\r\n\r\n    const handleInputChange = ({ target }) => {\r\n        setFormValues({\r\n            ...formValues,\r\n            [target.name]: target.value\r\n        })\r\n    }\r\n\r\n    const closeModal = () => {\r\n        dispatch( uiCloseModal() );\r\n        setFormValues( initTranslation );\r\n    }\r\n\r\n    const handleSubmitForm = (e) => {\r\n        e.preventDefault();\r\n\r\n        if ( wordEsp.trim().length < 2 ) {\r\n            return setWordEspValid(false);\r\n        }\r\n\r\n        if ( wordIta.trim().length < 2 ) {\r\n            return setWordItaValid(false);\r\n        }\r\n\r\n        dispatch( translationStartAddNew(formValues) );\r\n\r\n        setWordEspValid(true);\r\n        setWordItaValid(true);\r\n        closeModal();\r\n\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={ modalOpen }\r\n            onRequestClose={closeModal}\r\n            style={customStyles}\r\n            closeTimeoutMS={ 200 }\r\n            className=\"modal\"\r\n            overlayClassName=\"modal-fondo\"\r\n        >\r\n\r\n            <h1> Nueva traducción </h1>\r\n            <hr />\r\n            <form \r\n                className=\"container\"\r\n                onSubmit={ handleSubmitForm }\r\n            >\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Palabra ESP</label>\r\n                    <input\r\n                        type=\"text\" \r\n                        className={`form-control ${ !wordEspValid && 'is-invalid' }`} \r\n                        placeholder=\"ESP\"\r\n                        name=\"wordEsp\"\r\n                        autoComplete=\"off\"\r\n                        value={ wordEsp }\r\n                        onChange={ handleInputChange } \r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Palabra ITA</label>\r\n                    <input\r\n                        type=\"text\"  \r\n                        className={`form-control ${ !wordItaValid && 'is-invalid' }`}\r\n                        placeholder=\"ITA\"\r\n                        name=\"wordIta\" \r\n                        autoComplete=\"off\"\r\n                        value={ wordIta }\r\n                        onChange={ handleInputChange }\r\n                    />\r\n                </div>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-outline-primary btn-block\"\r\n                >\r\n                    <i className=\"far fa-save\"></i>\r\n                    <span> Guardar</span>\r\n                </button>\r\n\r\n            </form>\r\n\r\n        </Modal>\r\n    )\r\n}\r\n","import { types } from '../types/types';\r\n\r\nexport const uiOpenModal = () => ({\r\n    type: types.uiOpenModal\r\n});\r\n\r\nexport const uiCloseModal = () => ({\r\n    type: types.uiCloseModal\r\n});","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { uiOpenModal } from '../../actions/ui';\r\n\r\nexport const AddNewFab = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClickNew = () => {\r\n        dispatch( uiOpenModal() );\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"btn btn-primary fab\"\r\n            onClick={ handleClickNew }\r\n        >\r\n            <i className=\"fas fa-plus\"></i>\r\n        </button>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { translationSetActive, translationStartDeleted } from '../../actions/translations';\r\n\r\nexport const DeleteEventFab = ({idTranslation}) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDelete = () => {\r\n        dispatch( translationSetActive(idTranslation) );\r\n        dispatch( translationStartDeleted() );\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"btn btn-danger fab-danger\"\r\n            onClick={ handleDelete }\r\n        >\r\n            <i className=\"fas fa-trash\"></i>\r\n        </button>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { DeleteEventFab } from './DeleteEventFab'\r\n\r\nexport const TranslationsGridItem = ({id ,wordEsp, wordIta}) => {\r\n    return (\r\n        <>\r\n            <tbody>\r\n                <tr>\r\n                    <td>{ wordEsp } - {wordIta}</td>\r\n                    <td><DeleteEventFab idTranslation={id} /></td>\r\n                </tr>\r\n            </tbody>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Pagination = ({ translationsPerPage, totalTranslations, paginate }) => {\r\n    const pageNumbers = [];\r\n\r\n    for (let i = 1; i <= Math.ceil(totalTranslations / translationsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <nav>\r\n                <ul className='pagination'>\r\n                    {pageNumbers.map(number => (\r\n                        <li key={number} className='page-item'>\r\n                            <button onClick={() => paginate(number)} className='page-link'>\r\n                                {number}\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </nav>\r\n        </>\r\n    )\r\n};","import React, { useState } from 'react'\r\nimport { TranslationsGridItem } from './TranslationsGridItem';\r\nimport { useSelector } from 'react-redux';\r\nimport { Pagination } from './Pagination';\r\n\r\nexport const TranslationsGrid = () => {\r\n    const { translations } = useSelector(state => state.dictionary);\r\n    const [ currentPage, setCurrentPage ] = useState(1);\r\n    const [ translationsPerPage ] = useState(5);\r\n\r\n    // Get current translations\r\n    const indexOfLastTranslation = currentPage * translationsPerPage;\r\n    const indexOfFirstTranslation = indexOfLastTranslation - translationsPerPage;\r\n    const currentTranslations = translations.slice(indexOfFirstTranslation, indexOfLastTranslation);\r\n\r\n    // Change page\r\n    const paginate = (pageNumber) => {setCurrentPage(pageNumber);};\r\n\r\n    return (\r\n        <>  \r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"table-responsive text-center\">\r\n                        <table className=\"table table-hover table-bordered\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">ESP - ITA</th>\r\n                                    <th scope=\"col\">X</th>\r\n                                </tr>\r\n                            </thead>\r\n                                {\r\n                                    currentTranslations.map( translation => (\r\n                                        <TranslationsGridItem \r\n                                            key={ translation.id }\r\n                                            { ...translation }\r\n                                        />\r\n                                    ))\r\n                                }\r\n                        </table>\r\n                    </div>\r\n                    <Pagination \r\n                        translationsPerPage={translationsPerPage} \r\n                        totalTranslations={translations.length} \r\n                        paginate={paginate}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { Navbar } from '../ui/Navbar'\r\nimport { DictionaryModal } from './DictionaryModal'\r\nimport { AddNewFab } from '../ui/AddNewFab'\r\nimport { TranslationsGrid } from '../ui/TranslationsGrid'\r\nimport { useDispatch } from 'react-redux'\r\nimport { translationStartLoading } from '../../actions/translations'\r\n\r\nexport const DictionaryScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch( translationStartLoading() )\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"dictionary-screen\">\r\n            <Navbar />       \r\n\r\n            <DictionaryModal />\r\n            \r\n            <AddNewFab />\r\n\r\n            <TranslationsGrid />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Route, Redirect } from 'react-router-dom';\n\n\nexport const PublicRoute = ({\n    isAuthenticated,\n    component: Component,\n    ...rest\n}) => {\n\n    return (\n        <Route { ...rest }\n            component={ (props) => (\n                ( isAuthenticated )\n                    ? ( <Redirect to=\"/\" /> )\n                    : ( <Component { ...props } /> )\n            )}\n        \n        />\n    )\n}\n\nPublicRoute.propTypes = {\n    isAuthenticated: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Route, Redirect } from 'react-router-dom';\n\n\nexport const PrivateRoute = ({\n    isAuthenticated,\n    component: Component,\n    ...rest\n}) => {\n\n    return (\n        <Route { ...rest }\n            component={ (props) => (\n                ( isAuthenticated )\n                    ? ( <Component { ...props } /> )\n                    : ( <Redirect to=\"/login\" /> )\n            )}\n        \n        />\n    )\n}\n\nPrivateRoute.propTypes = {\n    isAuthenticated: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired\n}\n","import React, { useEffect, useMemo } from 'react';\r\nimport queryString from 'query-string';\r\nimport { TranslationsGridItem } from '../ui/TranslationsGridItem';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getTranslationsByName } from '../selectors/getTranslationsByName';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navbar } from '../ui/Navbar';\r\nimport { translationStartLoading } from '../../actions/translations';\r\n\r\nexport const DictionarySearch = ({ history }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch( translationStartLoading() )\r\n    }, [dispatch]);\r\n\r\n    const location = useLocation();\r\n    const { q = '' } = queryString.parse( location.search );\r\n\r\n    const [ formValues, handleInputChange ] = useForm({\r\n        searchText: q\r\n    });\r\n    const { searchText } = formValues;\r\n\r\n    const { translations } = useSelector( state => state.dictionary );\r\n    \r\n    // Se usa useMemo para buscar solo cuándo se modifica el query string, en este caso el valor de q .\r\n    const translationFiltered = useMemo(() => getTranslationsByName( q, translations ), [q, translations])\r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n        history.push(`?q=${ searchText }`);\r\n    }\r\n\r\n    const handleReturn = () => {\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <div className=\"dictionary-screen\">\r\n            <Navbar />\r\n\r\n            <div className=\"container\">\r\n            \r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-5\">\r\n                        <h4> Search Form </h4>\r\n                        <hr />\r\n\r\n                        <form onSubmit={ handleSearch }>\r\n                            <input \r\n                                type=\"text\"\r\n                                placeholder=\"Buscar traducción\"\r\n                                className=\"m-1 form-control\"\r\n                                name=\"searchText\"\r\n                                autoComplete=\"off\"\r\n                                value={ searchText }\r\n                                onChange={ handleInputChange }\r\n                            />\r\n\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn m-1 btn-block btn-outline-primary\"\r\n                            >\r\n                                Search...\r\n                            </button>\r\n                        </form>\r\n\r\n                        <button \r\n                            className=\"btn m-1 btn-outline-info\"\r\n                            onClick={ handleReturn }\r\n                        >\r\n                            Return\r\n                        </button>\r\n                        \r\n                    </div>\r\n\r\n\r\n                    <div className=\"col-7\">\r\n\r\n                        <h4> Results </h4>\r\n                        <hr />\r\n\r\n                        { \r\n                            (q ==='') \r\n                                && \r\n                                <div className=\"alert alert-info\">\r\n                                    Buscar una traducción\r\n                                </div>\r\n                        }\r\n\r\n                        { \r\n                            (q !=='' && translationFiltered.length === 0 ) \r\n                                && \r\n                                <div className=\"alert alert-danger\">\r\n                                    No hay traducciones con este nombre { q }\r\n                                </div>\r\n                        }\r\n\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"table-responsive text-center\">\r\n                                    <table className=\"table table-hover table-bordered\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th scope=\"col\">ESP - ITA</th>\r\n                                                <th scope=\"col\">X</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                            {\r\n                                                translationFiltered.map( translation => (\r\n                                                    <TranslationsGridItem \r\n                                                        key={ translation.id }\r\n                                                        { ...translation }\r\n                                                    />\r\n                                                ))\r\n                                            }\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getTranslationsByName = ( name = '', translations ) => {\r\n\r\n    if ( name === '' ) {\r\n        return [];\r\n    }\r\n\r\n    name = name.toLocaleLowerCase();\r\n    return translations.filter( translations => translations.wordIta.toLocaleLowerCase().includes( name )  );\r\n\r\n}","import React, { useEffect } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect\r\n} from \"react-router-dom\";\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { LoginScreen } from '../components/auth/LoginScreen';\r\nimport { DictionaryScreen } from '../components/dictionary/DictionaryScreen';\r\nimport { startChecking } from '../actions/auth';\r\nimport { PublicRoute } from './PublicRoute';\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { DictionarySearch } from '../components/dictionary/DictionarySearch';\r\n\r\nexport const AppRouter = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    // Extraemos info del store gracias a redux\r\n    const { checking , uid } = useSelector(state => state.auth);\r\n\r\n    // Cada vez que accedemos a cualquier archivo\r\n    useEffect(() => {\r\n        dispatch( startChecking() )\r\n    }, [dispatch]);\r\n\r\n    // Si el checking no esta en false\r\n    if ( checking ) {\r\n        return (<h5>Espere....</h5>);\r\n    }\r\n\r\n    // Convertir un string en boleano añadiendo !!\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n                    <PublicRoute \r\n                        exact \r\n                        path=\"/login\" \r\n                        component={ LoginScreen } \r\n                        isAuthenticated={ !!uid }\r\n                    />\r\n\r\n                    <PrivateRoute \r\n                        exact \r\n                        path=\"/\" \r\n                        component={ DictionaryScreen }\r\n                        isAuthenticated={ !!uid } \r\n                    />\r\n\r\n                    <PrivateRoute \r\n                        exact \r\n                        path=\"/search\" \r\n                        component={ DictionarySearch }\r\n                        isAuthenticated={ !!uid } \r\n                    />\r\n\r\n                    <Redirect to=\"/\" />\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    modalOpen: false,\r\n}\r\n\r\n\r\nexport const uiReducer = ( state = initialState, action ) => {\r\n\r\n    switch( action.type ) {\r\n        case types.uiOpenModal:\r\n            return {\r\n                ...state,\r\n                modalOpen: true\r\n            }\r\n\r\n        case types.uiCloseModal:\r\n            return {\r\n                ...state,\r\n                modalOpen: false\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { types } from \"../types/types\";\r\n\r\n// const initialState = {\r\n//     translations: [{\r\n//         wordEsp: 'Chico',\r\n//         wordIta: 'Ragazzo',\r\n//         user: {\r\n//             _id: '123',\r\n//             name: 'Fernando'\r\n//         }\r\n//     }]\r\n// }\r\n\r\nconst initialState = {\r\n    translations: [],\r\n    activeTranslation: null\r\n}\r\n\r\nexport const dictionaryReducer = (state = initialState, action) => {\r\n    switch ( action.type ) {\r\n        case types.translationSetActive:\r\n            return {\r\n                ...state,\r\n                activeTranslation: action.payload\r\n            }\r\n        case types.translationAddNew:\r\n            return {\r\n                ...state,\r\n                translations: [\r\n                    ...state.translations,\r\n                    action.payload\r\n                ]\r\n            }\r\n        case types.translationDeleted:\r\n            return{\r\n                ...state,\r\n                translations: state.translations.filter(\r\n                    e => ( e.id !== state.activeTranslation )\r\n                ),\r\n                activeTranslation: null\r\n            }\r\n        case types.translationLoaded:\r\n            return {\r\n                ...state,\r\n                translations: [\r\n                    ...action.payload\r\n                ]\r\n            }\r\n        case types.translationLogout:\r\n            return {\r\n                ...initialState\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    checking: true,\r\n    // uid: null,\r\n    // name: null\r\n}\r\n\r\nexport const authReducer = ( state = initialState, action ) => {\r\n    switch ( action.type ) {\r\n        case types.authLogin:\r\n            // action.payload -> añadimos al state: el uid y el name\r\n            // ...action.payload -> para machacar la info. actual.\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                checking: false\r\n            }\r\n        case types.authCheckingFinish:\r\n            return{\r\n                ...state,\r\n                checking: false\r\n            }\r\n        // Borra el uid y el name\r\n        case types.authLogout:\r\n            return{\r\n                checking: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { uiReducer } from './uiReducer';\r\nimport { dictionaryReducer } from './dictionaryReducer';\r\nimport { authReducer } from './authReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    ui: uiReducer,\r\n    dictionary: dictionaryReducer,\r\n    auth: authReducer\r\n})","\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { rootReducer } from '../reducers/rootReducer';\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware( thunk )\r\n    )\r\n);","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { AppRouter } from './router/AppRouter';\r\nimport { store } from './store/store';\r\n\r\nexport const DictionaryApp = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <AppRouter />\r\n        </Provider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DictionaryApp } from './DictionaryApp';\n\nimport './styles.css';\n\nReactDOM.render(\n  <DictionaryApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}